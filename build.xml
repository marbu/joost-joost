<?xml version="1.0"?>
<!--
 | $Id: build.xml,v 1.20 2005/02/28 08:29:34 obecker Exp $
 |
 | Ant build file
 | Author: Oliver Becker
 +-->
<project name="joost" default="all" basedir=".">

  <property name="src" value="src" />
  <property name="classes" value="classes" />
  <property name="doc" value="doc" />
  <property name="grammar.dir" value="${src}/net/sf/joost/grammar" />
  <property name="grammar.package" value="net.sf.joost.grammar" />
  <property name="genHelper" value="joostGen.jar" />
  
  <taskdef name="preprocess" classname="net.sf.joost.helper.ant.Preprocess"
           classpath="lib/${genHelper}" />
  
  <path id="cp">
    <fileset dir="lib">
      <include name="*.jar" />
      <exclude name="${genHelper}" />
    </fileset>
  </path>

  <target name="all" depends="compile" />
  
  <target name="init">
    <tstamp>
      <format property="date.today" pattern="yyyy-MM-dd" />
    </tstamp>
    <available file="${classes}" property="classes.available" />
    <available file="${doc}/api" property="apidoc.available" />
    <uptodate property="yylex.uptodate"
              targetfile="${grammar.dir}/Yylex.java">
      <srcfiles dir="${grammar.dir}" includes="Yylex" />
    </uptodate>
    <uptodate property="pattern.uptodate"
              targetfile="${grammar.dir}/PatternParser.java">
      <srcfiles dir="${grammar.dir}"
                includes="Pattern.cup, expr.inc, terminals.inc" />
    </uptodate>
    <uptodate property="expr.uptodate"
              targetfile="${grammar.dir}/ExprParser.java">
      <srcfiles dir="${grammar.dir}"
                includes="Expr.cup, expr.inc, terminals.inc" />
    </uptodate>
  </target>

  
  <target name="dep"
          depends="init, mk.yylex, mk.pattern, mk.expr" />

  
  <target name="mk.classes" unless="classes.available">
    <mkdir dir="${classes}" />
  </target>

  
  <target name="mk.yylex" unless="yylex.uptodate">
    <java classname="JLex.Main" classpath="lib/${genHelper}"
          fork="true" failonerror="true">
      <arg line="${grammar.dir}/Yylex" />
    </java>
  </target>

  
  <!-- called by mk.pattern and mk.expr -->
  <target name="mk.grammar">
    <preprocess infile="${grammar.dir}/${grammar}.cup"
                outfile="${grammar.dir}/${grammar}Parser.cup" />
    <!-- property needed here to prevent CVS from keyword processing (Id) -->
    <property name="dollar" value="$" />
    <replace file="${grammar.dir}/${grammar}Parser.cup"
             token="* ${dollar}Id: ${grammar}.cup,v">
      <replacevalue>* This file was generated automatically - do not edit!
 *
 * $</replacevalue>
    </replace>
    <replace file="${grammar.dir}/${grammar}Parser.cup"
             token="@@@START-NT@@@" value="${grammar}" />
    <java classname="java_cup.Main" classpath="lib/${genHelper}"
          fork="true" failonerror="true" dir="${grammar.dir}">
      <arg line="-parser ${grammar}Parser" />
      <arg line="-symbols Sym" />
      <arg line="-runtime ${grammar.package}.cup" />
      <arg value="-interface" />
      <arg value="-compact_red" />
      <arg value="-nowarn" />
      <arg value="${grammar}Parser.cup" />
    </java>
  </target>

  
  <target name="mk.pattern" unless="pattern.uptodate">
    <antcall target="mk.grammar">
      <param name="grammar" value="Pattern" />
    </antcall>
  </target>

  
  <target name="mk.expr" unless="expr.uptodate">
    <antcall target="mk.grammar">
      <param name="grammar" value="Expr" />
    </antcall>
  </target>

  
  <target name="maketests" depends="compile"
    description="compiles the java sources from the test subdirectory">
    <javac debug="on" srcdir="${src}" includes="test/**"
           destdir="${classes}" classpathref="cp" />
  </target>

  
  <target name="compile" depends="dep, mk.classes"
    description="compiles the java sources into the classes subdirectory (with debug information)"> 
    <javac debug="on" srcdir="${src}" excludes="test/**"
           destdir="${classes}" classpathref="cp" />
    <antcall target="compile-non-java" />
  </target>

  
  <target name="jar" depends="dep, mk.classes"
          description="creates joost.jar (without test classes and debug information)">
    <delete dir="${classes}" />
    <mkdir dir="${classes}" />
    <javac srcdir="${src}" destdir="${classes}" classpathref="cp" excludes="test/**" optimize="true"/>
    <antcall target="compile-non-java" />
    <jar jarfile="${ant.project.name}.jar"
         basedir="${classes}" excludes="test/**, samples/**"
         manifest="conf/manifest.mf" />
  </target>

  
  <target name="compile-non-java">
    <!-- copy log4j properties -->
    <copy file="conf/log4j.properties" todir="${classes}" />
    <!-- copy text files -->
    <copy todir="${classes}">
      <fileset dir="${src}">
        <include name="**/*.txt"/>
      </fileset>
    </copy>
    <!-- update version file -->
    <property name="version" location="${classes}/net/sf/joost/version.txt" />
    <replace file="${version}" token="@@@DATE@@@" value="${date.today}" />
    <replace file="${version}" token="@@@USER@@@" value="${user.name}" />
  </target>


  <target name="mk.apidoc" unless="apidoc.available">
    <mkdir dir="${doc}/api" />
  </target>

  
  <target name="doc" depends="dep, mk.apidoc"
    description="creates the API documentation in the doc/api subdirectory">
    <copy file="docsrc/index.html" tofile="doc/index.html" />
    <replace file="doc/index.html" token="@@@DATE@@@" value="${date.today}" />
    <javadoc sourcepath="${src}" destdir="${doc}/api"
             link="http://java.sun.com/j2se/1.4.2/docs/api"
             packagenames="net.sf.joost, net.sf.joost.instruction,
                           net.sf.joost.stx, net.sf.joost.stx.helpers,
                           net.sf.joost.emitter, net.sf.joost.grammar,
                           net.sf.joost.grammar.cup, net.sf.joost.grammar.tree,
                           net.sf.joost.trace, net.sf.joost.trax"
             windowtitle="Joost API documentation" private="true"
             breakiterator="true">
      <classpath refid="cp" />
    </javadoc>
  </target>
  

  <target name="clean" description="removes the classes subdirectory">
    <delete dir="${classes}" />
  </target>

  
  <target name="realclean" depends="clean"
    description="removes the classes and api-doc subdirectory as well as the jar file and the packed source distributions">
    <delete dir="${doc}/api" />
    <delete file="${ant.project.name}.jar" />
    <delete>
      <fileset dir="." includes="${ant.project.name}-*.tar.gz" />
      <fileset dir="." includes="${ant.project.name}-*.zip" />
      <fileset dir="${grammar.dir}">
        <include name="*Parser.*" />
        <include name="Sym.java" />
        <include name="Yylex.java" />
      </fileset>
    </delete>
  </target>


  <property name="dist" value="dist" />
  <target name="dist" depends="jar, doc"
    description="creates packed source and binary distributions in .tar.gz and .zip format">
    <mkdir dir="${dist}" />
    <cvs cvsRoot=":pserver:anonymous@cvs.sourceforge.net:/cvsroot/joost"
         command="export" dest="${dist}" date="today"
         package="${ant.project.name}" />
    <!-- rename the directory name from "joost" to something like
         "joost-20020401" -->
    <tstamp>
      <format property="date.version" pattern="yyyyMMdd" />
    </tstamp>
    <property name="dist.name" value="${ant.project.name}-${date.version}" />
    <move todir="${dist}/${dist.name}">
      <fileset dir="${dist}/${ant.project.name}" />
    </move>
    <!-- unfortunately the target "move" seems to move all files separately,
         keeping the directories, so we have to delete them -->
    <delete dir="${dist}/${ant.project.name}" />
    <!-- delete unwanted scripts and dirs -->
    <delete file="${dist}/${dist.name}/runtest.sh" />
    <delete file="${dist}/${dist.name}/runerrortest.sh" />
    <delete includeEmptyDirs="true">
      <fileset dir="${dist}/${dist.name}/docsrc" />
    </delete>
    <!-- copy the generated jar and javadoc -->
    <copy file="${ant.project.name}.jar"
          todir="${dist}/${dist.name}" />
    <copy todir="${dist}/${dist.name}/${doc}">
      <fileset dir="${doc}" />
    </copy>
    <!-- copy STX examples -->
    <property name="examples.dir" value="${dist}/${dist.name}/examples" />
    <mkdir dir="${examples.dir}" />
    <copy todir="${examples.dir}">
      <fileset dir="../test"
               includesfile="conf/examples.inc" excludes="*.res"/>
    </copy>
    <!-- first: source distribution -->
    <!-- create .tar.gz -->
    <tar tarfile="${ant.project.name}-src.tar">
      <tarfileset dir="${dist}">
        <include name="${dist.name}/**" />
        <!-- included with a different mode -->
        <exclude name="${dist.name}/joost.sh" />
        <exclude name="${dist.name}/run.sh" />
        <exclude name="${dist.name}/rundb.sh" />
        <exclude name="${dist.name}/runfop.sh" />
      </tarfileset>
      <!-- set execute permissions -->
      <tarfileset dir="${dist}" mode="755">
        <include name="${dist.name}/joost.sh" />
        <include name="${dist.name}/run.sh" />
        <include name="${dist.name}/rundb.sh" />
        <include name="${dist.name}/runfop.sh" />
      </tarfileset>
    </tar>
    <gzip src="${ant.project.name}-src.tar"
          zipfile="${dist.name}-src.tar.gz" />
    <delete file="${ant.project.name}-src.tar" />
    <!-- create .zip -->
    <zip basedir="${dist}"
         destfile="${dist.name}-src.zip" />
    <!-- second: binary distribution -->
    <!-- remove sources and apidoc -->
    <delete includeEmptyDirs="true">
      <fileset dir="${dist}/${dist.name}">
        <include name="run*.sh" />
        <include name="README" />
        <include name="ISSUES" />
        <include name="build.xml" />
        <include name="${src}/**" />
        <include name="conf/**" />
        <include name="lib/**" />
        <include name="${doc}/api/**" />
      </fileset>
    </delete>
    <!-- create .tar.gz -->
    <tar tarfile="${ant.project.name}-bin.tar">
      <tarfileset dir="${dist}">
        <include name="${dist.name}/**" />
        <!-- included with a different mode -->
        <exclude name="${dist.name}/joost.sh" />
      </tarfileset>
      <!-- set execute permissions -->
      <tarfileset dir="${dist}" mode="755">
        <include name="${dist.name}/joost.sh" />
      </tarfileset>
    </tar>
    <gzip src="${ant.project.name}-bin.tar"
          zipfile="${dist.name}-bin.tar.gz" />
    <delete file="${ant.project.name}-bin.tar" />
    <!-- create .zip -->
    <zip basedir="${dist}"
         destfile="${dist.name}-bin.zip" />
    <!-- clean up -->
    <delete dir="${dist}" />
  </target>
  
</project>
